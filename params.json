{"name":"httpbackoff","tagline":"HTTP retry library with exponential backoff support and intelligent handling of http status codes and networking exceptions","body":"# httpbackoff\r\n[![Build Status](https://secure.travis-ci.org/taskcluster/httpbackoff.png)](http://travis-ci.org/taskcluster/httpbackoff)\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/httpbackoff?status.png)](https://godoc.org/github.com/taskcluster/httpbackoff)\r\n\r\nAutomatic http retries for intermittent failures, with exponential backoff,\r\nbased on https://github.com/cenkalti/backoff.\r\n\r\nThe reason for a separate library, is that this library handles http status\r\ncodes to know whether to retry or not.  HTTP codes in range 500-599 are\r\nretried. Connection failures are also retried. Status codes 400-499 are\r\nconsidered permanent errors and are not retried.\r\n\r\nThe Retry function wraps any function that returns `(*http.Response, error)`.\r\n\r\nFor example, the following code that is not using retries:\r\n\r\n```go\r\nres, err := http.Get(\"http://www.google.com/robots.txt\")\r\n```\r\n\r\ncan be rewritten as:\r\n\r\n```go\r\nres, attempts, err := httpbackoff.Retry(func() (*http.Response, error) { return http.Get(\"http://www.google.com/robots.txt\") })\r\n```\r\n\r\nPlease note the additional return value `attempts` is an `int` specifying how\r\nmany http calls were made (i.e. = 1 if no retries, otherwise > 1).\r\n\r\nThe go http package has 11 functions that return `(*http.Reponse, error)`:\r\n\r\n* http://golang.org/pkg/net/http/#Client.Do\r\n* http://golang.org/pkg/net/http/#Client.Get\r\n* http://golang.org/pkg/net/http/#Client.Head\r\n* http://golang.org/pkg/net/http/#Client.Post\r\n* http://golang.org/pkg/net/http/#Client.PostForm\r\n* http://golang.org/pkg/net/http/#Get\r\n* http://golang.org/pkg/net/http/#Head\r\n* http://golang.org/pkg/net/http/#Post\r\n* http://golang.org/pkg/net/http/#PostForm\r\n* http://golang.org/pkg/net/http/#ReadResponse\r\n* http://golang.org/pkg/net/http/#Transport.RoundTrip\r\n\r\nTo simplify using these functions, 11 utility functions have been written that\r\nwrap these. Therefore you can simplify this example above further with:\r\n\r\n```go\r\nres, _, err := httpbackoff.Get(\"http://www.google.com/robots.txt\")\r\n```\r\n\r\n## Configuring backoff settings\r\n\r\nDo something like this before making http calls with the library:\r\n\r\n```go\r\nimport \"github.com/cenkalti/backoff\"\r\n\r\n...\r\n...\r\n\r\nhttpbackoff.BackOffSettings = &backoff.ExponentialBackOff{\r\n\tInitialInterval:     1 * time.Millisecond,\r\n\tRandomizationFactor: 0.2,\r\n\tMultiplier:          1.2,\r\n\tMaxInterval:         5 * time.Millisecond,\r\n\tMaxElapsedTime:      20 * time.Millisecond,\r\n\tClock:               backoff.SystemClock,\r\n}\r\n```\r\n\r\nPlease note these are global settings to the module, so you can't concurrently\r\nuse different backoff settings.\r\n\r\n## Testing\r\n\r\nThe package has tests, which run in travis. See http://travis-ci.org/taskcluster/httpbackoff.\r\n\r\n## Concurrency\r\n\r\nAs far as I am aware, there is nothing in this library that prevents it from\r\nbeing used concurrently. Please let me know if you find any problems!\r\n\r\n## Contributing\r\nContributions are welcome. Please fork, and issue a Pull Request back with an\r\nexplanation of your changes. Also please include tests for any functional\r\nchanges.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
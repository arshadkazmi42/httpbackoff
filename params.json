{
  "name": "httpbackoff",
  "tagline": "HTTP retry library with exponential backoff support and intelligent handling of http status codes and networking exceptions",
  "body": "# httpbackoff\r\n<img hspace=\"20\" align=\"left\" src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n[![Build Status](https://travis-ci.org/taskcluster/httpbackoff.svg?branch=master)](https://travis-ci.org/taskcluster/httpbackoff)\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/httpbackoff?status.svg)](https://godoc.org/github.com/taskcluster/httpbackoff)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/httpbackoff/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/httpbackoff?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](http://mozilla.org/MPL/2.0)\r\n\r\nAutomatic http retries for intermittent failures, with exponential backoff,\r\nbased on https://github.com/cenkalti/backoff.\r\n\r\nThe reason for a separate library, is that this library handles http status\r\ncodes to know whether to retry or not.  HTTP codes in range 500-599 are\r\nretried. Connection failures are also retried. Status codes 400-499 are\r\nconsidered permanent errors and are not retried.\r\n\r\nThe Retry function performs the http request and retries if temporary errors\r\noccur. It takes a single parameter as its input - a function to perform the\r\nhttp request. This function must return `(resp *http.Response, tempError error,\r\npermError error)` where `tempError` must be non-nil if a temporary error occurs\r\n(e.g.  dropped connection), and `permError` must be non-nil if an error occurs\r\nthat does not warrant retrying the request (e.g. badly formed url).\r\n\r\nFor example, the following code that is not using retries:\r\n\r\n```go\r\nres, err := http.Get(\"http://www.google.com/robots.txt\")\r\n```\r\n\r\ncan be rewritten as:\r\n\r\n```go\r\nres, attempts, err := httpbackoff.Retry(func() (*http.Response, error, error) {\r\n\tresp, err := http.Get(\"http://www.google.com/robots.txt\")\r\n\t// assume all errors are temporary\r\n    return resp, err, nil\r\n})\r\n```\r\n\r\nPlease note the additional return value `attempts` is an `int` specifying how\r\nmany http calls were made (i.e. = 1 if no retries, otherwise > 1).\r\n\r\nThe go http package has 9 functions that return `(*http.Reponse, error)` that\r\ncan potentially be retried:\r\n\r\n* http://golang.org/pkg/net/http/#Client.Do\r\n* http://golang.org/pkg/net/http/#Client.Get\r\n* http://golang.org/pkg/net/http/#Client.Head\r\n* http://golang.org/pkg/net/http/#Client.Post\r\n* http://golang.org/pkg/net/http/#Client.PostForm\r\n* http://golang.org/pkg/net/http/#Get\r\n* http://golang.org/pkg/net/http/#Head\r\n* http://golang.org/pkg/net/http/#Post\r\n* http://golang.org/pkg/net/http/#PostForm\r\n\r\nTo simplify using these functions, 9 utility functions have been written that\r\nwrap these. Therefore you can simplify this example above further with:\r\n\r\n```go\r\nres, _, err := httpbackoff.Get(\"http://www.google.com/robots.txt\")\r\n```\r\n\r\n## Configuring back off settings\r\n\r\nTo use cusom back off settings (for example, in testing, you might want to fail quickly), instead of calling the package functions, you can call methods of HTTPRetryClient with the same name:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"net/http/httputil\"\r\n\t\"time\"\r\n\r\n\t\"github.com/cenkalti/backoff\"\r\n\t\"github.com/taskcluster/httpbackoff\"\r\n)\r\n\r\nfunc main() {\r\n\t// Note, you only need to create a client if you want to customise\r\n\t// the back off settings. In this example, we want to, but if you\r\n\t// wish to use the reasonable default settings, no need to do this.\r\n\tretryClient := httpbackoff.Client{\r\n\t\tBackOffSettings: &backoff.ExponentialBackOff{\r\n\t\t\tInitialInterval:     1 * time.Millisecond,\r\n\t\t\tRandomizationFactor: 0.2,\r\n\t\t\tMultiplier:          1.2,\r\n\t\t\tMaxInterval:         5 * time.Millisecond,\r\n\t\t\tMaxElapsedTime:      20 * time.Millisecond,\r\n\t\t\tClock:               backoff.SystemClock,\r\n\t\t},\r\n\t}\r\n\r\n\tres, _, err := retryClient.Get(\"http://www.google.com/robots.txt\")\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"%s\", err)\r\n\t}\r\n\tdata, err := httputil.DumpResponse(res, true)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"%s\", err)\r\n\t}\r\n\tlog.Print(string(data))\r\n}\r\n```\r\n\r\n## Testing\r\n\r\nThe package has tests, which run in travis. See http://travis-ci.org/taskcluster/httpbackoff.\r\n\r\n## Concurrency\r\n\r\nAs far as I am aware, there is nothing in this library that prevents it from\r\nbeing used concurrently. Please let me know if you find any problems!\r\n\r\n## Contributing\r\nContributions are welcome. Please fork, and issue a Pull Request back with an\r\nexplanation of your changes. Also please include tests for any functional\r\nchanges.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}